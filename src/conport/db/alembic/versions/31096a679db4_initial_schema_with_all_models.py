"""Initial schema with all models

Revision ID: 31096a679db4
Revises: 
Create Date: <jouw_datum>

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '31096a679db4'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('active_context',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content', sa.JSON(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('active_context_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('content', sa.JSON(), nullable=False),
    sa.Column('change_source', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('context_links',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('source_item_type', sa.String(), nullable=False),
    sa.Column('source_item_id', sa.String(), nullable=False),
    sa.Column('target_item_type', sa.String(), nullable=False),
    sa.Column('target_item_id', sa.String(), nullable=False),
    sa.Column('relationship_type', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_context_links_id'), 'context_links', ['id'], unique=False)
    op.create_index(op.f('ix_context_links_relationship_type'), 'context_links', ['relationship_type'], unique=False)
    op.create_index(op.f('ix_context_links_source_item_id'), 'context_links', ['source_item_id'], unique=False)
    op.create_index(op.f('ix_context_links_source_item_type'), 'context_links', ['source_item_type'], unique=False)
    op.create_index(op.f('ix_context_links_target_item_id'), 'context_links', ['target_item_id'], unique=False)
    op.create_index(op.f('ix_context_links_target_item_type'), 'context_links', ['target_item_type'], unique=False)
    op.create_table('custom_data',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('category', sa.String(), nullable=False),
    sa.Column('key', sa.String(), nullable=False),
    sa.Column('value', sa.JSON(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('category', 'key', name='_category_key_uc')
    )
    op.create_index(op.f('ix_custom_data_category'), 'custom_data', ['category'], unique=False)
    op.create_index(op.f('ix_custom_data_id'), 'custom_data', ['id'], unique=False)
    op.create_index(op.f('ix_custom_data_key'), 'custom_data', ['key'], unique=False)
    op.create_index(op.f('ix_custom_data_timestamp'), 'custom_data', ['timestamp'], unique=False)
    op.create_table('decisions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('summary', sa.String(), nullable=False),
    sa.Column('rationale', sa.Text(), nullable=True),
    sa.Column('implementation_details', sa.Text(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_decisions_id'), 'decisions', ['id'], unique=False)
    op.create_index(op.f('ix_decisions_summary'), 'decisions', ['summary'], unique=False)
    op.create_index(op.f('ix_decisions_timestamp'), 'decisions', ['timestamp'], unique=False)
    op.create_table('product_context',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('content', sa.JSON(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('product_context_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('content', sa.JSON(), nullable=False),
    sa.Column('change_source', sa.String(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('system_patterns',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_system_patterns_id'), 'system_patterns', ['id'], unique=False)
    op.create_index(op.f('ix_system_patterns_name'), 'system_patterns', ['name'], unique=True)
    op.create_index(op.f('ix_system_patterns_timestamp'), 'system_patterns', ['timestamp'], unique=False)
    op.create_table('progress_entries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['progress_entries.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_progress_entries_id'), 'progress_entries', ['id'], unique=False)
    op.create_index(op.f('ix_progress_entries_status'), 'progress_entries', ['status'], unique=False)
    op.create_index(op.f('ix_progress_entries_timestamp'), 'progress_entries', ['timestamp'], unique=False)
    
    # === FTS SETUP TOEGEVOEGD ===
    op.execute("""
    CREATE VIRTUAL TABLE decisions_fts USING fts5(
        summary,
        rationale,
        implementation_details,
        content='decisions',
        content_rowid='id'
    );
    """)
    op.execute("""
    CREATE TRIGGER decisions_ai AFTER INSERT ON decisions BEGIN
        INSERT INTO decisions_fts(rowid, summary, rationale, implementation_details)
        VALUES (new.id, new.summary, new.rationale, new.implementation_details);
    END;
    """)
    op.execute("""
    CREATE TRIGGER decisions_ad AFTER DELETE ON decisions BEGIN
        INSERT INTO decisions_fts(decisions_fts, rowid, summary, rationale, implementation_details)
        VALUES ('delete', old.id, old.summary, old.rationale, old.implementation_details);
    END;
    """)
    op.execute("""
    CREATE TRIGGER decisions_au AFTER UPDATE ON decisions BEGIN
        INSERT INTO decisions_fts(decisions_fts, rowid, summary, rationale, implementation_details)
        VALUES ('delete', old.id, old.summary, old.rationale, old.implementation_details);
        INSERT INTO decisions_fts(rowid, summary, rationale, implementation_details)
        VALUES (new.id, new.summary, new.rationale, new.implementation_details);
    END;
    """)

    op.execute("""
    CREATE VIRTUAL TABLE custom_data_fts USING fts5(
        category,
        key,
        value,
        content='custom_data',
        content_rowid='id'
    );
    """)
    op.execute("""
    CREATE TRIGGER custom_data_ai AFTER INSERT ON custom_data BEGIN
        INSERT INTO custom_data_fts(rowid, category, key, value)
        VALUES (new.id, new.category, new.key, new.value);
    END;
    """)
    op.execute("""
    CREATE TRIGGER custom_data_ad AFTER DELETE ON custom_data BEGIN
        INSERT INTO custom_data_fts(custom_data_fts, rowid, category, key, value)
        VALUES ('delete', old.id, old.category, old.key, old.value);
    END;
    """)
    op.execute("""
    CREATE TRIGGER custom_data_au AFTER UPDATE ON custom_data BEGIN
        INSERT INTO custom_data_fts(custom_data_fts, rowid, category, key, value)
        VALUES ('delete', old.id, old.category, old.key, old.value);
        INSERT INTO custom_data_fts(rowid, category, key, value)
        VALUES (new.id, new.category, new.key, new.value);
    END;
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP TABLE IF EXISTS decisions_fts;")
    op.execute("DROP TRIGGER IF EXISTS decisions_ai;")
    op.execute("DROP TRIGGER IF EXISTS decisions_ad;")
    op.execute("DROP TRIGGER IF EXISTS decisions_au;")
    
    op.execute("DROP TABLE IF EXISTS custom_data_fts;")
    op.execute("DROP TRIGGER IF EXISTS custom_data_ai;")
    op.execute("DROP TRIGGER IF EXISTS custom_data_ad;")
    op.execute("DROP TRIGGER IF EXISTS custom_data_au;")
    
    op.drop_index(op.f('ix_progress_entries_timestamp'), table_name='progress_entries')
    op.drop_index(op.f('ix_progress_entries_status'), table_name='progress_entries')
    op.drop_index(op.f('ix_progress_entries_id'), table_name='progress_entries')
    op.drop_table('progress_entries')
    op.drop_index(op.f('ix_system_patterns_timestamp'), table_name='system_patterns')
    op.drop_index(op.f('ix_system_patterns_name'), table_name='system_patterns')
    op.drop_index(op.f('ix_system_patterns_id'), table_name='system_patterns')
    op.drop_table('system_patterns')
    op.drop_table('product_context_history')
    op.drop_table('product_context')
    op.drop_index(op.f('ix_decisions_timestamp'), table_name='decisions')
    op.drop_index(op.f('ix_decisions_summary'), table_name='decisions')
    op.drop_index(op.f('ix_decisions_id'), table_name='decisions')
    op.drop_table('decisions')
    op.drop_index(op.f('ix_custom_data_timestamp'), table_name='custom_data')
    op.drop_index(op.f('ix_custom_data_key'), table_name='custom_data')
    op.drop_index(op.f('ix_custom_data_id'), table_name='custom_data')
    op.drop_index(op.f('ix_custom_data_category'), table_name='custom_data')
    op.drop_table('custom_data')
    op.drop_index(op.f('ix_context_links_target_item_type'), table_name='context_links')
    op.drop_index(op.f('ix_context_links_target_item_id'), table_name='context_links')
    op.drop_index(op.f('ix_context_links_source_item_type'), table_name='context_links')
    op.drop_index(op.f('ix_context_links_source_item_id'), table_name='context_links')
    op.drop_index(op.f('ix_context_links_relationship_type'), table_name='context_links')
    op.drop_index(op.f('ix_context_links_id'), table_name='context_links')
    op.drop_table('context_links')
    op.drop_table('active_context_history')
    op.drop_table('active_context')
    # ### end Alembic commands ###