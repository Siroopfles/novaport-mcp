# NovaPort-MCP Custom Instructions Strategy for LLMs
# Version: 0.1.0-beta
# Description: Comprehensive guidance for LLMs on using NovaPort-MCP tools effectively

metadata:
  name: "Generic NovaPort-MCP Strategy"
  version: "0.1.0-beta"
  target_audience: "Large Language Models"
  description: "Strategic guidance for effective use of NovaPort-MCP tools and context management"
  last_updated: "2025-06-18"

# =============================================================================
# WORKSPACE INITIALIZATION
# =============================================================================
workspace_initialization:
  description: "Essential steps when starting work in a new NovaPort-MCP workspace"
  
  step_1_context_check:
    tool: "get_product_context / get_active_context"
    purpose: "Understand the current project state and session context"
    action: "Always retrieve both product and active context to understand the workspace"
    example: |
      1. Get product context to understand the overall project scope
      2. Get active context to understand the current session/task focus
  
  step_2_recent_activity:
    tool: "get_recent_activity"
    purpose: "Get an overview of what has been happening recently in the workspace"
    action: "Check recent decisions, progress entries, and other activities"
    
  step_3_context_establishment:
    tool: "update_active_context"
    purpose: "Set up session context for your current work"
    action: "Update active context with your current task/focus area"
    note: "Use 'patch_content' for incremental updates, 'content' for full replacement"

# =============================================================================
# CORE TOOL CATEGORIES AND USAGE
# =============================================================================
tool_categories:
  
  context_management:
    description: "Tools for managing workspace and session context"
    tools:
      - name: "get_product_context"
        purpose: "Retrieve global project context"
        when_to_use: "At start of session, when needing project overview"
        
      - name: "update_product_context"
        purpose: "Update global project information"
        when_to_use: "When project scope, goals, or architecture changes"
        parameters:
          content: "Full replacement of context"
          patch_content: "Incremental updates (recommended)"
        
      - name: "get_active_context"
        purpose: "Retrieve current session context"
        when_to_use: "To understand current focus area or task"
        
      - name: "update_active_context"
        purpose: "Update session-specific context"
        when_to_use: "When starting new tasks, changing focus areas"
        best_practice: "Use patch_content to maintain context history"

  decision_logging:
    description: "Tools for architectural and project decision management"
    tools:
      - name: "log_decision"
        purpose: "Record important project or architectural decisions"
        when_to_use: "After making design choices, architectural decisions, or policy changes"
        required_fields:
          summary: "Clear, concise decision statement"
        optional_fields:
          rationale: "Why this decision was made"
          implementation_details: "How to implement this decision"
          tags: "Categorization for future retrieval"
        best_practices:
          - "Use descriptive tags like #architecture, #api-design, #security"
          - "Include rationale to help future developers understand context"
          - "Reference related decisions when applicable"
          
      - name: "get_decisions"
        purpose: "Retrieve logged decisions"
        filters:
          - "Use tags to filter by category"
          - "Use limit to control number of results"
        when_to_use: "Before making related decisions, when reviewing past choices"

  progress_tracking:
    description: "Tools for task and progress management"
    tools:
      - name: "log_progress"
        purpose: "Track task progress and milestones"
        when_to_use: "At task start, major milestones, completion"
        parameters:
          status: "TODO, IN_PROGRESS, DONE, BLOCKED"
          description: "Clear description of the task or milestone"
          parent_id: "Link to parent task for hierarchical tracking"
        
      - name: "update_progress"
        purpose: "Update existing progress entries"
        when_to_use: "When task status changes or description needs updating"
        
      - name: "get_progress"
        purpose: "Retrieve progress entries"
        filters:
          status: "Filter by specific status"
          limit: "Control number of results"

  custom_data_management:
    description: "Tools for storing and retrieving structured project data"
    tools:
      - name: "store_custom_data"
        purpose: "Store structured data in categories"
        when_to_use: "For API specs, configurations, requirements, etc."
        structure:
          category: "High-level grouping (e.g., 'api_endpoints', 'configs')"
          key: "Specific identifier within category"
          value: "The actual data (JSON structure)"
        best_practices:
          - "Use consistent category naming conventions"
          - "Structure keys hierarchically (e.g., 'user_service.create_user')"
          - "Store related data in the same category"
          
      - name: "get_custom_data"
        purpose: "Retrieve stored custom data"
        patterns:
          by_category: "Get all items in a category"
          by_key: "Get specific item by category and key"
        when_to_use: "When implementing features, reviewing specs, checking configs"

  system_patterns:
    description: "Tools for documenting architectural patterns and standards"
    tools:
      - name: "log_system_pattern"
        purpose: "Document reusable architectural patterns"
        when_to_use: "When establishing coding standards, design patterns, or architectural approaches"
        structure:
          summary: "Pattern name and brief description"
          implementation_details: "How to implement this pattern"
          tags: "Categorization (e.g., #security, #database, #api)"
          
      - name: "get_system_patterns"
        purpose: "Retrieve documented patterns"
        when_to_use: "Before implementing similar functionality, during code reviews"

  search_and_discovery:
    description: "Tools for finding relevant information across the workspace"
    tools:
      - name: "semantic_search"
        purpose: "Find semantically related content using vector search"
        when_to_use: "When looking for related decisions, patterns, or data"
        parameters:
          query_text: "Natural language description of what you're looking for"
          top_k: "Number of results (1-25, default 5)"
          filters: "ChromaDB compatible filters for narrowing results"
        best_practices:
          - "Use descriptive queries rather than single keywords"
          - "Start with broader searches, then narrow with filters"
          - "Combine with other retrieval methods for comprehensive results"

  link_management:
    description: "Tools for creating relationships between NovaPort-MCP items"
    tools:
      - name: "create_link"
        purpose: "Establish relationships between different NovaPort-MCP items"
        when_to_use: "To connect related decisions, progress items, or custom data"
        relationships:
          - "decision -> system_pattern (implements)"
          - "progress -> decision (addresses)"
          - "custom_data -> decision (specified_by)"
          
      - name: "get_links_for_item"
        purpose: "Find all connections to a specific item"
        when_to_use: "To understand the full context around a decision or task"

  import_export:
    description: "Tools for data portability and backup"
    tools:
      - name: "export_workspace"
        purpose: "Export all workspace data to markdown files"
        when_to_use: "For backups, sharing, or migration"
        
      - name: "import_workspace"
        purpose: "Import data from markdown files"
        when_to_use: "When setting up workspace from existing data"

  batch_operations:
    description: "Tools for efficient bulk operations"
    tools:
      - name: "batch_log_items"
        purpose: "Create multiple items of the same type in one operation"
        when_to_use: "When importing data or creating multiple related items"
        supported_types: ["decision", "progress", "system_pattern", "custom_data"]

  history_and_versioning:
    description: "Tools for tracking changes over time"
    tools:
      - name: "get_context_history"
        purpose: "View historical versions of context"
        when_to_use: "To understand how project understanding has evolved"
        available_for: ["product_context", "active_context"]

# =============================================================================
# WORKFLOW PATTERNS
# =============================================================================
workflow_patterns:
  
  new_feature_development:
    description: "Recommended flow when developing a new feature"
    steps:
      1: "Check active context and recent activity"
      2: "Search for related decisions and patterns"
      3: "Update active context with feature focus"
      4: "Log progress entry for feature start"
      5: "Store API specs or requirements as custom data"
      6: "Log architectural decisions made during development"
      7: "Update progress as development progresses"
      8: "Create links between decisions, progress, and specifications"
      9: "Update active context when feature is complete"
    
  bug_investigation:
    description: "Recommended flow when investigating bugs"
    steps:
      1: "Search for related decisions and system patterns"
      2: "Check custom data for relevant configurations"
      3: "Log progress entry for investigation start"
      4: "Document findings and decisions in decision log"
      5: "Update progress with resolution status"
      6: "Link resolution decision to original bug progress"
    
  architecture_review:
    description: "Recommended flow when reviewing or updating architecture"
    steps:
      1: "Get current system patterns and recent decisions"
      2: "Search for related architectural decisions"
      3: "Update active context with review focus"
      4: "Log new system patterns if patterns emerge"
      5: "Log decisions about architectural changes"
      6: "Create links between patterns and decisions"
      7: "Update product context if overall architecture changes"
    
  project_handoff:
    description: "Recommended flow when transferring project knowledge"
    steps:
      1: "Export workspace for backup"
      2: "Review and update product context"
      3: "Document any undocumented patterns as system patterns"
      4: "Log any pending decisions that need to be made"
      5: "Create comprehensive links between related items"
      6: "Update active context with handoff status"

# =============================================================================
# CONTEXT MANAGEMENT STRATEGIES
# =============================================================================
context_management_strategies:
  
  layered_context_approach:
    description: "Use product and active context in layers"
    product_context:
      purpose: "Long-term, stable project information"
      content_examples:
        - "Project goals and vision"
        - "Core architecture decisions"
        - "Team structure and roles"
        - "Technology stack choices"
        - "Key external dependencies"
    active_context:
      purpose: "Session-specific, dynamic information"
      content_examples:
        - "Current sprint goals"
        - "Active feature development"
        - "Immediate blockers or issues"
        - "Session-specific focus areas"
        - "Temporary configuration overrides"
  
  context_update_patterns:
    incremental_updates:
      tool: "patch_content"
      when_to_use: "Most common case - adding or modifying specific keys"
      example: |
        {
          "current_sprint.goal": "Implement user authentication",
          "current_sprint.blockers": ["Database migration pending"]
        }
    
    full_replacement:
      tool: "content"
      when_to_use: "Major restructuring or complete context reset"
      warning: "This overwrites entire context - use sparingly"
    
    key_deletion:
      pattern: "Use '__DELETE__' value in patch_content"
      example: |
        {
          "obsolete_config_key": "__DELETE__"
        }

# =============================================================================
# BEST PRACTICES
# =============================================================================
best_practices:
  
  decision_logging:
    - "Log decisions when they impact future development"
    - "Include enough context for future developers to understand rationale"
    - "Use consistent tagging for easy retrieval"
    - "Reference related decisions when building on previous choices"
    - "Update decisions if circumstances change significantly"
  
  progress_tracking:
    - "Create hierarchical task structures using parent_id"
    - "Use descriptive status values consistently"
    - "Log progress at meaningful milestones, not just completion"
    - "Include blockers and dependencies in descriptions"
    - "Link progress to related decisions and patterns"
  
  custom_data_organization:
    - "Use hierarchical category naming (e.g., 'api.endpoints', 'api.schemas')"
    - "Keep related data in the same category"
    - "Use descriptive keys that indicate the data type"
    - "Store configuration as structured JSON rather than raw text"
    - "Version important data by including version in the key"
  
  search_optimization:
    - "Use natural language queries for semantic search"
    - "Combine multiple search strategies for comprehensive results"
    - "Use tags consistently across all item types"
    - "Include relevant keywords in summaries and descriptions"
    - "Create links to improve discoverability"
  
  context_maintenance:
    - "Regularly review and clean up active context"
    - "Keep product context stable and authoritative"
    - "Use semantic versioning concepts for major context changes"
    - "Document context structure and conventions"
    - "Archive obsolete context rather than deleting"

# =============================================================================
# COMMON PATTERNS AND ANTI-PATTERNS
# =============================================================================
patterns:
  
  effective_patterns:
    decision_chaining:
      description: "Link related decisions to show decision evolution"
      implementation: "Use tags and links to connect sequential decisions"
      
    progressive_disclosure:
      description: "Start with high-level context, drill down as needed"
      implementation: "Use search and links to navigate from general to specific"
      
    context_breadcrumbs:
      description: "Maintain trail of how you arrived at current context"
      implementation: "Update active context with reasoning and history"
    
    collaborative_documentation:
      description: "Structure information for team sharing"
      implementation: "Use consistent categorization and clear descriptions"

  anti_patterns_to_avoid:
    context_pollution:
      description: "Filling context with temporary or irrelevant information"
      solution: "Use active context for temporary info, clean up regularly"
      
    decision_duplication:
      description: "Logging the same decision multiple times"
      solution: "Search existing decisions before logging new ones"
      
    orphaned_data:
      description: "Creating data without proper categorization or links"
      solution: "Always use meaningful categories and create relevant links"
      
    information_silos:
      description: "Storing related information in disconnected places"
      solution: "Use links and consistent tagging to connect related items"

# =============================================================================
# TROUBLESHOOTING
# =============================================================================
troubleshooting:
  
  common_issues:
    context_not_found:
      symptoms: "Getting empty or default context"
      solutions:
        - "Check if workspace is properly initialized"
        - "Verify workspace_id is correct"
        - "Initialize context with basic project information"
    
    search_returns_no_results:
      symptoms: "Semantic search returns empty results"
      solutions:
        - "Try broader query terms"
        - "Check if data has been indexed"
        - "Use get_custom_data or get_decisions as alternatives"
    
    too_many_results:
      symptoms: "Searches return overwhelming number of results"
      solutions:
        - "Use more specific query terms"
        - "Apply filters to narrow results"
        - "Reduce top_k parameter"
    
    broken_links:
      symptoms: "Links pointing to non-existent items"
      solutions:
        - "Check item IDs and types"
        - "Use get_links_for_item to audit link health"
        - "Clean up orphaned links"

# =============================================================================
# INTEGRATION GUIDELINES
# =============================================================================
integration_guidelines:
  
  with_development_workflow:
    - "Integrate NovaPort-MCP calls into your natural development process"
    - "Don't over-document - focus on decisions and patterns that matter"
    - "Use progress tracking for tasks that span multiple sessions"
    - "Store reusable configurations and specifications"
  
  with_team_collaboration:
    - "Use consistent categorization and tagging conventions"
    - "Document team-specific patterns and conventions"
    - "Share context updates with team members"
    - "Use export/import for knowledge transfer"
  
  with_project_lifecycle:
    - "Initialize workspace with project charter and goals"
    - "Evolve context as project understanding grows"
    - "Archive completed phases in system patterns"
    - "Export project knowledge at major milestones"

# =============================================================================
# VERSION HISTORY
# =============================================================================
version_history:
  "0.1.0-beta":
    date: "2025-06-18"
    changes:
      - "Initial version with comprehensive tool coverage"
      - "Workflow patterns for common development scenarios"
      - "Best practices and anti-patterns guidance"
      - "Integration guidelines for team collaboration"